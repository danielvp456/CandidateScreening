name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

permissions:
  contents: read
  id-token: write

jobs:
  test-app:
    name: Test Next.js App
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.13.1' 

      - name: Install Dependencies
        run: npm install --force

      - name: Run tests
        run: npm test

      - name: Run build
        run: npm run build

  test-llm:
    name: Test Python LLM API
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./llm
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.3'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: pytest 

  deploy-app:
    name: Deploy App to Vercel
    runs-on: ubuntu-latest
    needs: test-app
    if: success()
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  deploy-llm:
    name: Deploy LLM API to Cloud Run
    runs-on: ubuntu-latest
    needs: test-llm
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Build and Push Docker image with Cloud Build
        run: |
          gcloud builds submit ./llm --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_SERVICE_NAME }}:latest

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ secrets.GCP_SERVICE_NAME }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          region: ${{ secrets.GCP_REGION }}
          image: gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_SERVICE_NAME }}:latest

      - name: Show deployed URL
        run: echo "Deployed to ${{ steps.deploy.outputs.url }}" 